# yamllint disable rule:line-length
---
- name: Gather facts
  hosts: all

  pre_tasks:
    - name: gather facts from excluded hosts
      ansible.builtin.setup: {}
      delegate_to: "{{ item }}"
      delegate_facts: true
      loop: "{{ groups['all'] }}"
      when: item not in ansible_play_hosts
      run_once: true
      tags:
        - always

    - name: gateway default IPv4 address must be public
      ansible.builtin.assert:
        quiet: true
        that:
          - ([hostvars.gateway.ansible_default_ipv4.address] | ansible.utils.ipaddr('public')) | length
      run_once: true
      tags:
        - always

- name: Set up OwnCA
  hosts: localhost
  gather_facts: false

  roles:
    - name: ownca
      tags:
        - always

- name: Configure Gateway
  hosts: gateway
  gather_facts: false

  roles:
    - role: unifi_core
      vars:
        unifi_core_certificate: |
          {{ hostvars.localhost.ownca_wildcard_certificate }}
          {{ hostvars.localhost.ownca_root_certificate }}
        unifi_core_privatekey: |
          {{ hostvars.localhost.ownca_wildcard_privatekey }}
      tags:
        - unifi-core

- name: Configure Tombstone
  hosts:
    - tombstone
  gather_facts: false

  pre_tasks:
    - name: configure LAN network
      ansible.builtin.copy:
        content: |
          [Match]
          Name={{ lan_if }}

          [Network]
          Address={{ lan_ipv4_address }}/24
          DNS={{ lan_ipv4_subnet | ansible.utils.nthhost(1) }}
          Gateway={{ lan_ipv4_subnet | ansible.utils.nthhost(1) }}
          IPv6AcceptRA=yes
          IPv6PrivacyExtensions=yes

          [IPv6AcceptRA]
          Token=eui64
        dest: /etc/systemd/network/20-lan.network
        owner: root
        group: root
        mode: !!str 0444
      tags:
        - always
      notify: reboot

    - name: enable systemd-networkd
      ansible.builtin.systemd_service:
        name: systemd-networkd.service
        enabled: true
      tags:
        - always
      notify: reboot

    - name: remove interfaces file
      ansible.builtin.file:
        path: /etc/network/interfaces
        state: absent
      notify: reboot

    - name: flush handlers
      ansible.builtin.meta: flush_handlers
      tags:
        - always

    - name: refresh network facts
      ansible.builtin.setup:
        gather_subset:
          - network
      tags:
        - always

    - name: install prerequisite packages
      ansible.builtin.apt:
        name:
          - acl
          - attr
          - gpg
          - python3-demjson # jsonlint
          - python3-lxml
          - virtualenv
          - yamllint
      tags:
        - always

    - name: remove conflicting packages
      ansible.builtin.apt:
        autoremove: true
        name:
          - ufw
        purge: true
        state: absent
      tags:
        - always

  roles:
    - role: alertmanager
      tags:
        - alertmanager
      when: false
    - role: alloy
      tags:
        - alloy
    - role: bazarr
      tags:
        - bazarr
    - role: calibre
      tags:
        - calibre
      when: false # TODO
    - role: calibre_web
      tags:
        - calibre-web
      when: false # TODO
    - role: chrony
      tags:
        - chrony
    - role: dns_updater
      tags:
        - dns-updater
    - role: grafana
      tags:
        - grafana
    - role: homebridge
      tags:
        - homebridge
    - role: imapfilter
      tags:
        - imapfilter
      when: false
    - role: lego
      tags:
        - lego
      when: false
    - role: loki
      tags:
        - loki
    - role: nginx
      tags:
        - nginx
    - role: nzbget
      tags:
        - nzbget
    - role: opensmtpd
      tags:
        - opensmtpd
    - role: overseerr
      tags:
        - overseerr
      when: false # TODO
    - role: prometheus
      tags:
        - prometheus
    - role: prowlarr
      tags:
        - prowlarr
    - role: qbittorrent
      tags:
        - qbittorrent
    - role: radarr
      tags:
        - radarr
    - role: readarr
      tags:
        - readarr
      when: false # TODO
    - role: restic
      tags:
        - restic
      when: false
    - role: samba
      tags:
        - samba
    - role: sonarr
      tags:
        - sonarr
    - role: sshd
      tags:
        - sshd
    - role: tdarr
      tags:
        - tdarr
    - role: unattended_upgrades
      tags:
        unattended-upgrades
    - role: unbound
      tags:
        - unbound

  tasks:
    - name: install additional packages
      ansible.builtin.apt:
        name:
          # - curl
          # - jq
          # - linux-cpupower
          - lsof
          # - man-db
          - net-tools
          - rfkill
          - tcpdump
      tags:
        - always

    - name: remove unwanted packages
      ansible.builtin.apt:
        autoremove: true
        name:
          - nano
          - python3-kubernetes
        purge: true
        state: absent
      tags:
        - always

  handlers:
    - name: reboot
      ansible.builtin.reboot: {}

- name: Configure proxy-in
  hosts:
    - proxy-in
  gather_facts: false

  pre_tasks:
    - name: configure network
      ansible.builtin.copy:
        content: |
          auto lo
          iface lo inet loopback

          auto enp1s0
          iface enp1s0 inet dhcp
            dns-nameservers 108.61.10.10 2001:19f0:300:1704::6
          iface enp1s0 inet6 auto
            privext 2
        dest: /etc/network/interfaces
        owner: root
        group: root
        mode: !!str 0444
      tags:
        - always
      notify: reboot

    - name: flush handlers
      ansible.builtin.meta: flush_handlers
      tags:
        - always

    - ansible.builtin.shell:
        cmd: ip -f inet6 -o addr show dev {{ ansible_default_ipv6.interface }} scope global mngtmpaddr | awk '{print $4}' | cut -d/ -f1
      changed_when: false
      register: result
      when: false

    - ansible.builtin.set_fact:
        wan_ipv6_address: "{{ result.stdout | trim }}"
      when: false

    - name: install prerequisite packages
      ansible.builtin.apt:
        name:
          - acl
          - attr
      tags:
        - always

    - name: remove conflicting packages
      ansible.builtin.apt:
        autoremove: true
        name:
          - ufw
        purge: true
        state: absent
      tags:
        - always

  roles:
    - role: alloy
      tags:
        - alloy
    - role: nginx
      tags:
        - nginx
    - role: opensmtpd
      tags:
        - opensmtpd
      when: false
    - role: sshd
      tags:
        - sshd
    - role: unattended_upgrades
      tags:
        unattended-upgrades
      when: false
    - role: unbound
      tags:
        - unbound

  tasks:
    - name: remove unwanted packages
      ansible.builtin.apt:
        autoremove: true
        name:
          - nano
        purge: true
        state: absent
      tags:
        - always

  handlers:
    - name: reboot
      ansible.builtin.reboot: {}

- name: Configure DiskStation
  hosts: diskstation
  gather_facts: false

  pre_tasks:
    - name: install pip
      ansible.builtin.command:
        argv:
          - "{{ ansible_python.executable }}"
          - -mensurepip
        creates: "{{ ansible_python.executable | dirname }}/pip{{ ansible_python.version.major }}"
      tags:
        - always

    - name: install lxml
      ansible.builtin.pip:
        name: lxml
      tags:
        - always

  roles:
    - role: alloy
      tags:
        - alloy
    - role: traefik
      tags:
        - traefik
    - role: watchtower
      tags:
        - watchtower

- name: Configure Pastime
  hosts: pastime
  gather_facts: false

  roles:
    - role: media
      tags:
        - media

  tasks:
    - ansible.windows.win_get_url:
        url: https://storage.tdarr.io/versions/2.17.01/win32_x64/Tdarr_Updater.zip
        dest: C:\Users\Nick\Downloads\Tdarr_Updater.zip
        force: false

    - ansible.windows.win_file:
        dest: C:\Users\Nick\Tdarr
        state: directory

    - community.windows.win_unzip:
        src: C:\Users\Nick\Downloads\Tdarr_Updater.zip
        dest: C:\Users\Nick\Tdarr
        creates: C:\Users\Nick\Tdarr\Tdarr_Updater.exe

    - ansible.windows.win_command:
        argv:
          - C:\Users\Nick\Tdarr\Tdarr_Updater.exe
        chdir: C:\Users\Nick\Tdarr
        creates: C:\Users\Nick\Tdarr\Tdarr_Node\Tdarr_Node.exe

    - community.windows.win_shortcut:
        src: C:\Users\Nick\Tdarr\Tdarr_Node\Tdarr_Node_Tray.exe
        directory: C:\Users\Nick\Tdarr
        windowstyle: minimized
        dest: C:\Roaming\AppData\Nick\Microsoft\Windows\Start Menu\Programs\Start-up\Tdarr_Node_Tray.lnk
      when: false # FIXME

    - ansible.windows.win_copy:
        content: |
          {
            "nodeName": "{{ ansible_hostname }}",
            "serverIP": "{{ hostvars.tombstone.lan_ipv4_address }}",
            "serverPort": 8266,
            "handbrakePath": "",
            "ffmpegPath": "",
            "mkvpropeditPath": "",
            "pathTranslators": [
              {
                "server": "/data",
                "node": "\\\\DISKSTATION\\Media"
              }
            ],
            "priority": -1
          }
        dest: C:\Users\Nick\Tdarr\configs\Tdarr_Node_Config.json

    - ansible.builtin.win_file:
        path: \\DISKSTATION\Media\{{ item }}"
        state: directory
      loop:
        - media\movies
        - media\tv
        - transcode_cache\movies
        - transcode_cache\tv
