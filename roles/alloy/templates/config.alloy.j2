prometheus.exporter.blackbox "integrations_blackbox" {
	config = "{ modules: { icmp: { prober: icmp, timeout: 5s } } }"

	target {
		address = "{% if ansible_hostname == 'proxy-in' %}f1tv.formula1.com{% else %}proxy-in.osborn.io{% endif %}"
		module  = "icmp"
		name    = "{% if ansible_hostname == 'proxy-in' %}f1tv.formula1.com{% else %}proxy-in.osborn.io{% endif %}"
	}
}

discovery.relabel "integrations_blackbox" {
	targets = prometheus.exporter.blackbox.integrations_blackbox.targets

	rule {
		replacement  = "integrations/blackbox"
		target_label = "job"
	}
}

prometheus.scrape "integrations_blackbox" {
	job_name        = "integrations/blackbox"
	scrape_interval = "15s"
	targets         = discovery.relabel.integrations_blackbox.output

	forward_to = [
		prometheus.remote_write.grafana_cloud.receiver,
	]
}

discovery.relabel "integrations_node_exporter" {
	targets = prometheus.exporter.unix.integrations_node_exporter.targets

	rule {
		replacement  = constants.hostname
		target_label = "instance"
	}

	rule {
		replacement  = "integrations/node_exporter"
		target_label = "job"
	}
}

prometheus.exporter.unix "integrations_node_exporter" {
	disable_collectors = [
		"ipvs",
		"btrfs",
		"infiniband",
		"xfs",
		"zfs",
	]

	enable_collectors = [
		"meminfo",
	]

	filesystem {
		fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
		mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
		mount_timeout        = "5s"
	}

	netclass {
		ignored_devices = "^(cali.*|lo|veth.*|[a-f0-9]{15})$"
	}

	netdev {
		device_exclude = "^(cali.*|lo|veth.*|[a-f0-9]{15})$"
	}
}

prometheus.scrape "integrations_node_exporter" {
	scrape_interval = "15s"
	targets         = discovery.relabel.integrations_node_exporter.output

	forward_to = [
		prometheus.remote_write.grafana_cloud.receiver,
	]
}

prometheus.remote_write "grafana_cloud" {
	endpoint {
		url = "https://prometheus-prod-09-prod-au-southeast-0.grafana.net/api/prom/push"

		basic_auth {
			password = "{{ grafana_cloud_password }}"
			username = "{{ prometheus_remote_write_username }}"
		}
	}
}

loki.source.journal "logs_integrations_integrations_node_exporter_journal_scrape" {
	max_age       = "24h0m0s"
	relabel_rules = discovery.relabel.logs_integrations_integrations_node_exporter_journal_scrape.rules

	forward_to = [
		loki.write.grafana_cloud.receiver,
	]
}

local.file_match "logs_integrations_integrations_node_exporter_direct_scrape" {
	path_targets = [
		{
			__address__ = "localhost",
			__path__    = "/var/log/{syslog,messages,*.log}",
			instance    = constants.hostname,
			job         = "integrations/node_exporter",
		},
	]
}

discovery.relabel "logs_integrations_integrations_node_exporter_journal_scrape" {
	targets = []

	rule {
		target_label = "unit"

		source_labels = [
			"__journal__systemd_unit",
		]
	}

	rule {
		target_label = "boot_id"

		source_labels = [
			"__journal__boot_id",
		]
	}

	rule {
		target_label = "transport"

		source_labels = [
			"__journal__transport",
		]
	}

	rule {
		target_label = "level"

		source_labels = [
			"__journal_priority_keyword",
		]
	}
}

loki.write "grafana_cloud" {
	endpoint {
		url = "https://logs-prod-004.grafana.net/loki/api/v1/push"

		basic_auth {
			password = "{{ grafana_cloud_password }}"
			username = "{{ loki_write_username }}"
		}
	}
}

// vim: ft=river
