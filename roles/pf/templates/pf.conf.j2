# See pf.conf(5) and /etc/examples/pf.conf

# Options

set block-policy return
#set limit table-entries 400000
set loginterface egress
set skip on { {{ ['enc0', 'lo', pppoe_pppoedev] | sort | join(' ') }} }

# Tables

table <bruteforce> counters persist
table <fullbogons4> counters persist file "/var/db/fullbogons-ipv4.txt"
#table <fullbogons6> counters persist file "/var/db/fullbogons-ipv6.txt"

#

match on egress scrub (max-mss 1452)

# match out on egress inet scrub
{% for ipv4 in [lan_ipv4, vpn_server_ipv4] %}
match out on egress inet from {{ ipv4 | ipaddr('network') }}/{{ ipv4 | ipaddr('prefix') }} nat-to {{ wan_ipv4 | ipaddr('address') }}
{% endfor %}

{% for ipv4 in [lan_ipv4, vpn_server_ipv4] %}
match out on {{ vpn_client_if }} inet from {{ ipv4 | ipaddr('network') }}/{{ ipv4 | ipaddr('prefix') }} nat-to ({{ vpn_client_if }}:0)
{% endfor %}

match in inet scrub (no-df random-id)

# Packet Filtering

block in # log
pass out quick

{% for ifspec in ['lo0', lan_if, pppoe_pppoedev] | sort %}
antispoof quick for {{ ifspec }}
{% endfor %}

block drop in log quick on egress inet from <fullbogons4> label bogons4
# TODO: figure out routeradv
#block drop in log quick on egress inet6 from <fullbogons6> label bogons6
block drop in log quick on egress from <bruteforce> label bruteforce

block return out log quick on egress inet to <fullbogons4>
#block return out log quick on egress inet6 to <fullbogons6>

#pass in quick on {{ lan_if }} inet from {{ lan_if }}:network to { {{ lan_if }} pppoe0:0 }

## https://us.battle.net/support/en/article/300479
pass in quick on {{ lan_if }} inet proto { tcp udp } \
  from {{ lan_ipv4 | ipaddr('network') }}/{{ lan_ipv4 | ipaddr('prefix') }} to port 1119 \
  route-to (pppoe0 (pppoe0:peer))
#pass in quick on {{ lan_if }} inet proto udp \
#  from {{ lan_if }}:network to port { 1119 6120 } \
#  route-to (pppoe0 (pppoe0:peer))

pass in quick on {{ lan_if }} inet from {{ lan_if }}:network
#pass in quick on {{ lan_if }} inet6 from {{ lan_if }}:network to { {{ lan_if }} pppoe0 }
#block return in quick on {{ lan_if }} inet6

#block return out log quick on {{ vpn_client_if }} inet proto tcp from pppoe0:0 to port 1119
#block return out log quick on {{ vpn_client_if }} inet proto udp from pppoe0:0 to port { 1119 6120 }

block return in log quick on {{ vpn_server_if }} inet to {{ lan_if }}:network
pass in quick on {{ vpn_server_if }} inet from ({{ vpn_server_if }}:network)
block return log quick on {{ vpn_server_if }} inet6 # bidirectional

antispoof quick for (egress)
# Troublesome with VPN...
#block in log quick on egress from { no-route urpf-failed } to any

pass in quick on pppoe0 inet proto tcp to {{ wan_ipv4 | ipaddr('address') }} port 22 \
  keep state (max-src-conn-rate 10/10, overload <bruteforce> flush global) \
  reply-to (pppoe0 (pppoe0:peer))
pass in quick on egress inet proto { tcp udp } to {{ wan_ipv4 | ipaddr('address') }} port 53 \
  reply-to (pppoe0 (pppoe0:peer))
pass in quick on egress inet proto tcp to {{ wan_ipv4 | ipaddr('address') }} port { 80 443 } \
  reply-to (pppoe0 (pppoe0:peer))
pass in quick on egress inet proto udp to {{ wan_ipv4 | ipaddr('address') }} port 1194 \
  reply-to (pppoe0 (pppoe0:peer))
pass in quick on egress inet proto icmp to {{ wan_ipv4 | ipaddr('address') }} icmp-type echoreq \
  reply-to (pppoe0 (pppoe0:peer))
{% if wan_ipv6 is defined %}
#pass in quick on egress inet6 proto ipv6-icmp to {{ wan_ipv6 | ipaddr('address') }} icmp6-type echoreq
{% endif %}

#block return out log quick on pppoe0 inet6 from {{ lan_if }}:network
#block return out log quick on {{ vpn_client_if }} inet6 from {{ lan_if }}:network
block drop in log quick on egress

block return	# block stateless traffic
pass		# establish keep-state
