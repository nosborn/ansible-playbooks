# See pf.conf(5) and /etc/examples/pf.conf

# Options

set block-policy return
#set limit table-entries 400000
set loginterface egress
set skip on { {{ ['enc0', 'lo', pppoe_pppoedev] | sort | join(' ') }} }

# Tables

table <ISP_NETBLOCKS> const {
{% for isp_netblock in isp_netblocks | ipv4 | sort %}
  {{ isp_netblock }}
{% endfor %}
}

table <bogons-v4> counters persist file "/var/db/fullbogons-ipv4.txt"
#table <bogons-v6> counters persist file "/var/db/fullbogons-ipv6.txt"

#

# match out on egress inet scrub

match in inet scrub (no-df random-id)

# Packet Filtering

block return in log
pass out

{% for ifspec in ['lo0', lan_if, pppoe_pppoedev] | sort %}
antispoof quick for {{ ifspec }}
{% endfor %}

#block drop in log quick on egress inet from <bogons-v4>
## TODO: figure out routeradv
#block drop in log quick on egress inet6 from <bogons-v6>
#block drop in log quick on egress from <bruteforce>

#block return out log quick on egress inet to <bogons4>
#block return out log quick on egress inet6 to <bogons6>

# ==== PPPOE0 ====

match on {{ wan_if }} scrub (max-mss 1452)

# ---- IN on pppoe0 ----

block drop in log on {{ wan_if }}

block in log quick on {{ wan_if }} inet from <bogons4>

pass in on {{ wan_if }} inet proto tcp to {{ wan_ipv4 | ipaddr('address') }} port 22 \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto { tcp udp } to {{ wan_ipv4 | ipaddr('address') }} port 53 \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto tcp to {{ wan_ipv4 | ipaddr('address') }} port { 80 443 } \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto udp to {{ wan_ipv4 | ipaddr('address') }} port 1194 \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto icmp to {{ wan_ipv4 | ipaddr('address') }} icmp-type echoreq \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))

# ---- OUT on pppoe0 ----

match out on {{ wan_if }} inet \
  from {{ lan_ipv4 | ipaddr('network') }}/{{ lan_ipv4 | ipaddr('prefix') }} \
  nat-to {{ wan_ipv4 | ipaddr('address') }}
match out on {{ wan_if }} inet \
  from {{ vpn_server_ipv4 | ipaddr('network') }}/{{ vpn_server_ipv4 | ipaddr('prefix') }} \
  nat-to {{ wan_ipv4 | ipaddr('address') }}

block out log on {{ wan_if }}

block out log quick on {{ wan_if }} inet to <bogons4>

pass out on {{ wan_if }} inet proto udp to port 2049
pass out on {{ wan_if }} inet tagged DiabloIII

block out log quick on {{ wan_if }} inet6

pass out on {{ wan_if }} to <ISP_NETBLOCKS>

# ==== RE0 ====

# ---- IN on re0 ----

pass in on {{ lan_if }}

# https://us.battle.net/support/en/article/300479
pass in on {{ lan_if }} inet proto { tcp udp } \
  from {{ lan_ipv4 | ipaddr('network') }}/{{ lan_ipv4 | ipaddr('prefix') }} to port 1119 \
  tag DiabloIII \
  route-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ lan_if }} inet proto udp \
  from {{ lan_if }}:network to port 6120 \
  tag DiabloIII \
  route-to ({{ wan_if }} ({{ wan_if }}:peer))

# ---- OUT on re0 ----

pass out on {{ lan_if }}

# ==== TUN0 ====

# ---- IN on tun0 ----

block drop in log on {{ vpn_client_if }}

# ---- OUT on tun0 ----

match out on {{ vpn_client_if }} inet from {{ lan_ipv4 | ipaddr('network') }}/{{ lan_ipv4 | ipaddr('prefix') }} nat-to ({{ vpn_client_if }}:0)
match out on {{ vpn_client_if }} inet from {{ vpn_server_ipv4 | ipaddr('network') }}/{{ vpn_server_ipv4 | ipaddr('prefix') }} nat-to ({{ vpn_client_if }}:0)

block out log on {{ vpn_client_if }}

block out log quick on {{ vpn_client_if }} to <ISP_NETBLOCKS>
block out log quick on {{ vpn_client_if }} inet6

pass out on {{ vpn_client_if }} inet

# ==== TUN1 ====

# ---- IN on tun1 ----

pass in on {{ vpn_server_if }}

pass in on {{ vpn_server_if }} inet proto tcp to port 80 divert-to 127.0.0.1 port 3129

# ---- OUT on tun1 ----

pass out on {{ vpn_server_if }}

pass out on {{ vpn_server_if }} inet divert-reply

# ==== END ====

##pass in quick on {{ lan_if }} inet from {{ lan_if }}:network to { {{ lan_if }} pppoe0:0 }
#
#pass in quick on {{ lan_if }} inet from {{ lan_if }}:network
#pass in quick on {{ lan_if }} inet6 from {{ lan_if }}:network to { {{ lan_if }} pppoe0 }
##block return in quick on {{ lan_if }} inet6
#
##block return out log quick on {{ vpn_client_if }} inet proto tcp from pppoe0:0 to port 1119
##block return out log quick on {{ vpn_client_if }} inet proto udp from pppoe0:0 to port { 1119 6120 }
#
#block return in log quick on {{ vpn_server_if }} inet to {{ lan_if }}:network
#pass in quick on {{ vpn_server_if }} inet from ({{ vpn_server_if }}:network)
#block return log quick on {{ vpn_server_if }} inet6 # bidirectional
#
#antispoof quick for (egress)
## Troublesome with VPN...
##block in log quick on egress from { no-route urpf-failed } to any
#
#pass in quick on pppoe0 inet proto tcp to {{ wan_ipv4 | ipaddr('address') }} port 22 \
#  keep state (max-src-conn-rate 10/10, overload <bruteforce> flush global) \
#  reply-to (pppoe0 (pppoe0:peer))
#pass in quick on egress inet proto { tcp udp } to {{ wan_ipv4 | ipaddr('address') }} port 53 \
#  reply-to (pppoe0 (pppoe0:peer))
#pass in quick on egress inet proto tcp to {{ wan_ipv4 | ipaddr('address') }} port { 80 443 } \
#  reply-to (pppoe0 (pppoe0:peer))
#pass in quick on egress inet proto udp to {{ wan_ipv4 | ipaddr('address') }} port 1194 \
#  reply-to (pppoe0 (pppoe0:peer))
#pass in quick on egress inet proto icmp to {{ wan_ipv4 | ipaddr('address') }} icmp-type echoreq \
#  reply-to (pppoe0 (pppoe0:peer))
#{% if wan_ipv6 is defined %}
#pass in quick on egress inet6 proto { tcp udp } to {{ wan_ipv6 | ipaddr('address') }} port 53 \
#  reply-to (pppoe0 (pppoe0:peer))
#pass in quick on egress inet6 proto ipv6-icmp to {{ wan_ipv6 | ipaddr('address') }} icmp6-type echoreq \
#  reply-to (pppoe0 (pppoe0:peer))
#{% endif %}
#
##pass out quick on pppoe0 inet6 from {{ lan_if }}:network to 2001:8b0:0::/48
#block return-icmp6 (admin-unr) out log quick on pppoe0 inet6 from {{ lan_if }}:network
#block return-icmp6 (admin-unr) out log quick on {{ vpn_client_if }} inet6 from {{ lan_if }}:network
#block drop in log quick on egress
#
#block return	# block stateless traffic
#pass		# establish keep-state
