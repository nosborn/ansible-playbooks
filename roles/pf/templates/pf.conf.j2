# See pf.conf(5) and /etc/examples/pf.conf

# Options

#set limit table-entries 400000
set loginterface egress
set skip on { {{ ['enc0', 'lo', pppoe_pppoedev] | sort | join(' ') }} }
set state-policy if-bound

# Tables

table <bogons-v4> counters persist file "/var/db/fullbogons-ipv4.txt"
#table <bogons-v6> counters persist file "/var/db/fullbogons-ipv6.txt"

#

# match out on egress inet scrub

#match in inet scrub (no-df random-id)

# Packet Filtering

block return in log
pass out

{% for ifspec in ['lo0', lan_if] | sort %}
antispoof quick for {{ ifspec }}
{% endfor %}

#block drop in log quick on egress inet from <bogons-v4>
## TODO: figure out routeradv
#block drop in log quick on egress inet6 from <bogons-v6>
#block drop in log quick on egress from <bruteforce>

#block return out log quick on egress inet to <bogons4>
#block return out log quick on egress inet6 to <bogons6>

# ==== PPPOE0 ====

match on {{ wan_if }} scrub (max-mss 1440, random-id, reassemble tcp)

# ---- IN on pppoe0 ----

block drop in log on {{ wan_if }}

block drop in log quick on {{ wan_if }} inet from <bogons4>

pass in on {{ wan_if }} inet proto tcp to {{ wan_ipv4 | ipaddr('address') }} port 22 \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto { tcp udp } to {{ wan_ipv4 | ipaddr('address') }} port 53 \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto tcp to {{ wan_ipv4 | ipaddr('address') }} port { 80 443 } \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto udp to {{ wan_ipv4 | ipaddr('address') }} port { 500 4500 } \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto udp to {{ wan_ipv4 | ipaddr('address') }} port 1194 \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))
pass in on {{ wan_if }} inet proto icmp to {{ wan_ipv4 | ipaddr('address') }} icmp-type echoreq \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))

pass in on {{ wan_if }} inet proto esp to {{ wan_ipv4 | ipaddr('address') }} \
  reply-to ({{ wan_if }} ({{ wan_if }}:peer))

{% if wan_ipv6 is defined %}
pass in on {{ wan_if }} inet6 proto { tcp udp } to {{ wan_ipv6 | ipaddr('address') }} port 53
pass in on {{ wan_if }} inet6 proto tcp to {{ wan_ipv6 | ipaddr('address') }} port { 80 443 }
pass in on {{ wan_if }} inet6 proto tcp to {{ wan_ipv6 | ipaddr('address') }} port 1194
pass in on {{ wan_if }} inet6 proto icmp6 to {{ wan_ipv6 | ipaddr('address') }} icmp6-type echoreq

#pass in on {{ wan_if }} inet6 proto icmp6 from fe80::/16 to {{ wan_if }} icmp6-type routeradv
{% endif %}

# ---- OUT on pppoe0 ----

match out on {{ wan_if }} inet from {{ lan_ipv4 | ipaddr('network') }}/{{ lan_ipv4 | ipaddr('prefix') }} nat-to {{ wan_ipv4 | ipaddr('address') }}
match out on {{ wan_if }} inet from {{ vpn_server_ipv4 | ipaddr('network') }}/{{ vpn_server_ipv4 | ipaddr('prefix') }} nat-to {{ wan_ipv4 | ipaddr('address') }}

pass out on {{ wan_if }}

block return out log quick on {{ wan_if }} inet to <bogons-v4>
#block return out log quick on {{ wan_if }} inet6 to <bogons-v6>

# ==== {{ lan_if | upper }} ====

# ---- IN on {{ lan_if }} ----

pass in on {{ lan_if }}

# ---- OUT on {{ lan_if }} ----

pass out on {{ lan_if }}

{% if vpn_client_if is defined %}
# ==== TUN0 ====

antispoof quick for {{ vpn_client_if }}

match on {{ vpn_client_if }} scrub (max-mss 1440, random-id, reassemble tcp)

# ---- IN on tun0 ----

block drop in log on {{ vpn_client_if }}

# ---- OUT on tun0 ----

match out on {{ vpn_client_if }} inet from {{ lan_ipv4 | ipaddr('network') }}/{{ lan_ipv4 | ipaddr('prefix') }} nat-to ({{ vpn_client_if }}:0)
match out on {{ vpn_client_if }} inet from {{ vpn_server_ipv4 | ipaddr('network') }}/{{ vpn_server_ipv4 | ipaddr('prefix') }} nat-to ({{ vpn_client_if }}:0)

block return out log on {{ vpn_client_if }}

#block return out log quick on {{ vpn_client_if }} inet6

pass out on {{ vpn_client_if }} inet

{% endif %}
{% if vpn_server_if is defined %}
# ==== TUN1 ====

antispoof quick for {{ vpn_server_if }}

# ---- IN on tun1 ----

pass in on {{ vpn_server_if }}

#pass in on {{ vpn_server_if }} inet proto tcp to port 80 divert-to 127.0.0.1 port 3129

# ---- OUT on tun1 ----

pass out on {{ vpn_server_if }}

#pass out on {{ vpn_server_if }} inet divert-reply

{% endif %}
# ==== END ====
