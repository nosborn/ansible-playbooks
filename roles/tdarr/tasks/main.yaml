---
- name: install dependencies
  ansible.builtin.apt:
    name:
      - handbrake-cli
      # - libtesseract4
      - mediainfo
      - mkvtoolnix
      - unzip

- name: get versions info
  ansible.builtin.uri:
    url: https://storage.tdarr.io/versions.json
    return_content: true
    body_format: json
  register: tdarr_versions

- name: set version fact
  ansible.builtin.set_fact:
    tdarr_version: "{{ tdarr_versions.json | first }}"

- ansible.builtin.file:
    path: /var/lib/tdarr
    owner: root
    group: root
    mode: !!str 0755
    state: directory

- name: create user
  ansible.builtin.user:
    name: tdarr
    comment: Tdarr
    create_home: false
    groups:
      - media
    home: /var/lib/tdarr
    shell: "{{ nologin_shell }}"
    system: true

- name: create config directory
  ansible.builtin.file:
    path: "{{ tdarr_item }}"
    owner: root
    group: tdarr
    mode: !!str 2770
    state: directory
  loop:
    - /var/lib/tdarr/configs
    - /var/lib/tdarr/logs
    - /var/lib/tdarr/server
  loop_control:
    loop_var: tdarr_item

- ansible.builtin.file:
    path: "{{ media_path }}/{{ tdarr_item }}"
    owner: root
    group: media
    mode: !!str 2770
    state: directory
  loop:
    - media/movies
    - media/tv
    - transcode_cache
    - transcode_cache/movies
    - transcode_cache/tv
  loop_control:
    loop_var: tdarr_item

- ansible.builtin.include_tasks:
    file: server.yaml
  vars:
    tdarr_server_src: "{{ tdarr_versions.json[tdarr_version].linux_x64.Tdarr_Server }}"

- ansible.builtin.include_tasks:
    file: node.yaml
  vars:
    tdarr_node_src: "{{ tdarr_versions.json[tdarr_version].linux_x64.Tdarr_Node }}"

- ansible.builtin.include_role:
    name: media
    tasks_from: site.yaml
  vars:
    media_name: tdarr
    media_port: "{{ tdarr_webui_port }}"
