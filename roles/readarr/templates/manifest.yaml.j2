---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: readarr
  name: readarr
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: readarr
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: readarr
    spec:
      containers:
        - args:
            - -data=/config
            - -nobrowser
          env:
            - name: TZ
              value: "{{ timezone }}"
          image: ghcr.io/nosborn/readarr:latest
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /ping
              port: http
          name: readarr
          ports:
            - containerPort: 8787
              name: http
          readinessProbe:
            httpGet:
              path: /ping
              port: http
          resources:
            limits:
              memory: 256Mi # TODO
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsGroup: !!int "{{ media_gid }}"
            runAsNonRoot: true
            runAsUser: !!int "{{ media_uid }}"
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /data
              name: media
              readOnly: false # TODO: remove
      securityContext:
        fsGroup: !!int "{{ media_gid }}"
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - hostPath:
            path: /var/lib/readarr
            type: Directory
          name: config
        - hostPath:
            path: /media/media
            type: Directory
          name: media
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  labels:
    app.kubernetes.io/name: readarr
  name: readarr
  namespace: media
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: Host(`readarr.{{ domain_name }}`)
      # middlewares:
      #   - name: middleware1
      #     namespace: apps
      services:
        - kind: Service
          name: readarr
          port: 8787
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: readarr
  name: readarr
  namespace: media
spec:
  ports:
    - port: 8787
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: readarr
