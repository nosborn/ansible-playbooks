set daemon 60 with start delay 120
set idfile /var/db/monit.id
set logfile syslog
set statefile /var/db/monit.state

set alert {{ monit_alert_email }} not on { instance, action }
set mailserver localhost
set mail-format {
  subject: monit alert -- $EVENT $SERVICE
  message: $EVENT Service $SERVICE

        Date: $DATE
      Action: $ACTION
        Host: $HOST
 Description: $DESCRIPTION
}

set httpd port 2812 address "{{ lan_ipv4|ipaddr('address') }}"
    signature disable
    allow {{ monit_username }}:{{ monit_password }} read-only

check process apmd matching "^/usr/sbin/apmd -A$"
  start program = "/usr/sbin/rcctl start apmd"
  stop program = "/usr/sbin/rcctl stop apmd"
  if does not exist for 5 cycles then restart
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert

check process avahi-daemon with pidfile /var/run/avahi-daemon/pid
  start program = "/usr/sbin/rcctl start avahi_daemon"
  stop program = "/usr/sbin/rcctl stop avahi_daemon"
  if does not exist for 5 cycles then restart
  if failed uid _avahi then alert
  if failed euid _avahi then alert
  # if failed gid nobody then alert
  if changed ppid then alert

check process collectd with pidfile /var/collectd/collectd.pid
  start program = "/usr/sbin/rcctl start collectd"
  stop program = "/usr/sbin/rcctl stop collectd"
  if does not exist for 5 cycles then restart
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert

check process ddclient with pidfile /var/run/ddclient/ddclient.pid
  start program = "/usr/sbin/rcctl start ddclient"
  stop program = "/usr/sbin/rcctl stop ddclient"
  if does not exist for 5 cycles then restart
  if failed uid _ddclient then alert
  if failed euid _ddclient then alert
  if failed gid _ddclient then alert
  if changed ppid then alert

check process dhcpcd with pidfile /var/run/dhcpcd.pid
  start program = "/usr/sbin/rcctl start dhcpcd"
  stop program = "/usr/sbin/rcctl stop dhcpcd"
  if does not exist for 5 cycles then restart
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert

check process dhcpd matching "^/usr/sbin/dhcpd "
  start program = "/usr/sbin/rcctl start dhcpd"
  stop program = "/usr/sbin/rcctl stop dhcpd"
  if does not exist for 5 cycles then restart
  if failed uid _dhcp then alert
  if failed euid _dhcp then alert
  if failed gid _dhcp then alert
  if changed ppid then alert

check process facette matching "^/usr/local/bin/facette$"
  start program = "/usr/sbin/rcctl start dhcpd"
  stop program = "/usr/sbin/rcctl stop dhcpd"
  if does not exist for 5 cycles then restart
  if failed
    host {{ lan_ipv4|ipaddr('address') }} port 12003 protocol http request "/api/v1/"
    for 5 cycles
    then alert
  if failed uid _facette then alert
  if failed euid _facette then alert
  if failed gid _facette then alert
  if changed ppid then alert

check process ntpd matching "^/usr/sbin/ntpd "
  start program = "/usr/sbin/rcctl start ntpd" with timeout 300 seconds
  stop program = "/usr/sbin/rcctl stop ntpd"
  if does not exist for 5 cycles then restart
  if failed
    host {{ lan_ipv4|ipaddr('address') }} port 123 type udp protocol ntp3
    for 5 cycles
    then alert
{% if lan_ipv6 is defined %}
  if failed
    host {{ lan_ipv6|ipaddr('address') }} port 123 type udp protocol ntp3
    for 5 cycles
    then alert
{% endif %}
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert

check process rad matching "^/usr/sbin/rad$"
  start program = "/usr/sbin/rcctl start rad"
  stop program = "/usr/sbin/rcctl stop rad"
  if does not exist for 5 cycles then restart
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert
  if children < 2 then alert

check process slaacd matching "^/sbin/slaacd$"
  start program = "/usr/sbin/rcctl start slaacd"
  stop program = "/usr/sbin/rcctl stop slaacd"
  if does not exist for 5 cycles then restart
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert
  if children < 2 then alert

check process smtpd matching "^/usr/sbin/smtpd$"
  start program = "/usr/sbin/rcctl start smtpd"
  stop program = "/usr/sbin/rcctl stop smtpd"
  if does not exist for 5 cycles then restart
  if failed
    host 127.0.0.1 port 25 protocol smtp
    for 5 cycles
    then alert
  if failed
    host ::1 port 25 protocol smtp
    for 5 cycles
    then alert
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert
  if children < 6 then alert

check process sshd with pidfile /var/run/sshd.pid
  start program = "/usr/sbin/rcctl start sshd"
  stop program = "/usr/sbin/rcctl stop sshd"
  if does not exist for 5 cycles then restart
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert

check process syslogd with pidfile /var/run/syslog.pid
  start program = "/usr/sbin/rcctl start syslogd"
  stop program = "/usr/sbin/rcctl stop syslogd"
  if does not exist for 5 cycles then restart
  if failed uid root then alert
  if failed euid root then alert
  if changed ppid then alert
  if children < 1 then alert

check process unbound with pidfile {{ unbound_pid_file }}
  start program = "/usr/sbin/rcctl start {{ unbound_service_name }}"
  stop program = "/usr/sbin/rcctl stop {{ unbound_service_name }}"
  if does not exist for 5 cycles then restart
  if failed
    host 127.0.0.1 port 53 type udp protocol dns
    for 5 cycles
    then alert
  if failed
    host {{ lan_ipv4|ipaddr('address') }} port 53 type udp protocol dns
    for 5 cycles
    then alert
  if failed
    host ::1 port 53 type udp protocol dns
    for 5 cycles
    then alert
{% if lan_ipv6 is defined %}
  if failed
    host {{ lan_ipv6|ipaddr('address') }} port 53 type udp protocol dns
    for 5 cycles
    then alert
{% endif %}
  if failed uid _unbound then alert
  if failed euid _unbound then alert
  if failed gid _unbound then alert
  if changed ppid then alert
  if children != {{ unbound_config_num_threads - 1 }} then alert

# include /etc/monit.d/*
