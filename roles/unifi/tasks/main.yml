# yamllint disable rule:line-length
---
- name: create unifi user
  ansible.builtin.user:
    name: unifi
    comment: UniFi Network
    create_home: false
    home: /var/empty
    password_lock: true
    shell: "{{ nologin_shell }}"
    system: true
  register: unifi_user_result

- name: create unifi configuration directories
  ansible.builtin.file:
    path: "{{ unifi_item }}"
    owner: root
    group: "{{ unifi_user_result.group }}"
    mode: 0750
    state: directory
  loop:
    - "{{ unifi_config_dir }}"
    - "{{ unifi_config_dir }}/sites"
    - "{{ unifi_config_dir }}/sites/default"
  loop_control:
    loop_var: unifi_item

# TODO: trigger usg reload
- name: configure unifi default site
  ansible.builtin.template:
    src: config.gateway.json.j2
    dest: "{{ unifi_config_dir }}/sites/default/config.gateway.json"
    owner: root
    group: "{{ unifi_user_result.group }}"
    mode: 0440
    validate: "{{ jsonlint_validate_command }}"

- name: create unifi data directory
  ansible.builtin.file:
    path: "{{ unifi_data_dir }}"
    owner: "{{ unifi_user_result.uid }}"
    group: "{{ unifi_user_result.group }}"
    mode: 0700
    state: directory

- name: create unifi log directory
  ansible.builtin.file:
    path: "{{ unifi_log_dir }}"
    owner: "{{ unifi_user_result.uid }}"
    group: "{{ unifi_user_result.group }}"
    mode: 0750
    state: directory

- name: create unifi-internal network
  community.docker.docker_network:
    name: unifi
    internal: true

- name: create unifi-mongo-data volumes
  community.docker.docker_volume:
    name: "{{ unifi_item }}"
  loop:
    - unifi-mongo-data-configdb
    - unifi-mongo-data-db
  loop_control:
    loop_var: unifi_item

- name: deploy unifi-mongo
  community.docker.docker_container:
    name: unifi-mongo
    image: mongo:3.6
    # cap_drop:
    #   - ALL
    env:
      TZ: "{{ timezone }}"
    # exposed_ports:
    #   - 27017
    healthcheck:
      test: >
        bash -c "if mongo --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'; then exit 0; fi; exit 1"
    networks:
      - name: unifi-internal
    read_only: true
    security_opts:
      - no-new-privileges=true
    tmpfs:
      - /tmp
    volumes:
      - unifi-mongo-data-configdb:/data/configdb
      - unifi-mongo-data-db:/data/db
    labels:
      com.centurylinklabs.watchtower.enable: !!str true
      traefik.enable: !!str false
    comparisons:
      "*": strict
    restart_policy: unless-stopped
    state: started

- name: deploy unifi
  community.docker.docker_container:
    name: unifi
    image: jacobalberty/unifi:v6
    # cap_drop:
    #   - ALL
    env:
      DB_NAME: unifi
      DB_URI: mongodb://unifi-mongo/unifi
      STATDB_URI: mongodb://unifi-mongo/unifi_stat
      TZ: "{{ timezone }}"
      UNIFI_GID: "{{ unifi_user_result.uid }}"
      UNIFI_UID: "{{ unifi_user_result.group }}"
      RUNAS_UID0: !!str false
    init: true
    networks:
      - name: bridge
      - name: unifi-internal
    published_ports:
      - "{{ lan_ipv4_address }}:{{ unifi_discovery_port }}:{{ unifi_discovery_port }}/udp"
    security_opts:
      - no-new-privileges=true
    volumes:
      - "{{ unifi_config_dir }}/sites:/unifi/data/sites:ro"
      - "{{ unifi_data_dir }}:/unifi/data"
      - "{{ unifi_log_dir }}:/unifi/log"
    labels:
      com.centurylinklabs.watchtower.enable: !!str true
      traefik.enable: !!str true
      traefik.http.routers.unifi.entrypoints: websecure
      traefik.http.routers.unifi.rule: Host(`unifi.{{ domain_name }}`)
      traefik.http.routers.unifi.service: unifi
      traefik.http.services.unifi.loadbalancer.server.port: !!str 8080
      traefik.http.routers.unifi-api.entrypoints: unifi
      traefik.http.routers.unifi-api.rule: Host(`unifi.{{ domain_name }}`)
      traefik.http.routers.unifi-api.service: unifi
      traefik.http.services.unifi-api.loadbalancer.server.port: !!str 8443
    comparisons:
      healthcheck: allow_more_present
      labels: allow_more_present
      "*": strict
    restart_policy: unless-stopped
    state: started
