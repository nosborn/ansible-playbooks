# roles/unifi/tasks/main
# yamllint disable rule:line-length
---
- file:
    path: /srv/unifi/data/sites/default
    owner: unifi
    group: unifi
    mode: 0750
    state: directory

- template:
    src: config.gateway.json.j2
    dest: /srv/unifi/data/sites/default/config.gateway.json
    owner: unifi
    group: unifi
    mode: 0440

# - template:
#     src: config.properties.j2
#     dest: /usr/local/share/unifi/data/sites/default/config.properties
#     owner: _unifi
#     group: "{{ root_group }}"
#     mode: 0600
#   notify: restart unifi
#   when: false

# - name: configure system properties
#   lineinfile:
#     path: /usr/local/share/unifi/data/system.properties
#     regex: "^{{ item.key }}="
#     line: "{{ item.key }}={{ item.value }}"
#     create: true
#     owner: _unifi
#     group: "{{ root_group }}"
#     mode: 0600
#   with_dict:
#     # log.guest: "{{ unifi_properties_log_guest }}"
#     log.inform: "{{ unifi_properties_log_inform }}"
#     # log.inform.ap: "{{ unifi_properties_log_inform_ap }}"
#     # log.inform.sta: "{{ unifi_properties_log_inform_sta }}"
#     reporter-uuid: "{{ unifi_properties_reporter_uuid }}"
#     system_ip: "{{ lan_ipv4_address }}"
#     unifi.G1GC.enabled: true
#     # unifi.https.ciphers: TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA
#     unifi.https.hsts: true
#     unifi.https.hsts.max_age: 31536000
#     unifi.https.hsts.preload: true
#     unifi.https.hsts.subdomain: true
#     unifi.https.sslEnabledProtocols: TLSv1.2
#     unifi.xms: "{{ unifi_properties_unifi_xms }}"
#     unifi.xmx: "{{ unifi_properties_unifi_xmx }}"
#     uuid: "{{ unifi_properties_uuid }}"
#   notify: restart unifi
#   when: false

- apt:
    name:
      - python-cryptography
      - python-openssl
    install_recommends: false
    state: present
  when: ansible_python.version.major == 2

- apt:
    name:
      - python3-cryptography
      - python3-openssl
    install_recommends: false
    state: present
  when: ansible_python.version.major == 3

- openssl_privatekey:
    path: /etc/ssl/private/cloudkey.key
    owner: root
    group: ssl-cert
    mode: 0440
  notify: restart nginx

- openssl_csr:
    privatekey_path: /etc/ssl/private/cloudkey.key
    common_name: "unifi.{{ global_domain }}"
    path: /etc/ssl/private/cloudkey.csr
    owner: root
    group: ssl-cert
    mode: 0440

- acme_certificate:
    account_key_content: "{{ letsencrypt_account_key }}"
    acme_directory: "{{ letsencrypt_acme_directory }}"
    acme_version: "{{ letsencrypt_acme_version }}"
    challenge: dns-01
    csr: /etc/ssl/private/cloudkey.csr
    fullchain_dest: /etc/ssl/private/cloudkey.crt
    modify_account: false
    remaining_days: "{{ unifi_acme_certificate_remaining_days }}"
  register: letsencrypt_challenge

- debug:
    var: letsencrypt_challenge
    verbosity: 1

- cloudflare_dns:
    account_api_token: "{{ cloudflare_account_api_token }}"
    account_email: "{{ cloudflare_account_email }}"
    record: "{{ letsencrypt_challenge.challenge_data['unifi.'+global_domain]['dns-01']['resource'] }}.unifi"
    solo: true
    type: TXT
    value: "{{ letsencrypt_challenge.challenge_data['unifi.'+global_domain]['dns-01']['resource_value'] }}"
    zone: "{{ global_domain }}"
  when: letsencrypt_challenge.changed
  delegate_to: localhost

- acme_certificate:
    account_key_content: "{{ letsencrypt_account_key }}"
    acme_directory: "{{ letsencrypt_acme_directory }}"
    acme_version: "{{ letsencrypt_acme_version }}"
    account_uri: "{{ letsencrypt_challenge.account_uri }}"
    challenge: dns-01
    csr: /etc/ssl/private/cloudkey.csr
    data: "{{ letsencrypt_challenge }}"
    fullchain_dest: /etc/ssl/private/cloudkey.crt
    modify_account: false
    remaining_days: "{{ unifi_acme_certificate_remaining_days }}"
  notify: restart nginx
  when: letsencrypt_challenge.changed

- file:
    path: /etc/ssl/private/cloudkey.crt
    owner: root
    group: ssl-cert
    mode: 0444
    state: file
  notify: restart nginx

- openssl_pkcs12:
    path: /etc/ssl/private/cloudkey.p12
    friendly_name: unifi
    passphrase: "{{ unifi_jks_password }}"
    certificate_path: /etc/ssl/private/cloudkey.crt
    privatekey_path: /etc/ssl/private/cloudkey.key
    owner: root
    group: root
    mode: 0400
    backup: true

- java_cert:
    cert_alias: unifi
    keystore_pass: "{{ unifi_jks_password }}"
    keystore_path: /etc/ssl/private/unifi.keystore.jks
    keystore_type: JKS
    pkcs12_alias: unifi
    pkcs12_path: /etc/ssl/private/cloudkey.p12
  notify: restart unifi

- slurp:
    src: /etc/ssl/private/cloudkey.crt
  register: unifi_certificate

- slurp:
    src: /etc/ssl/private/cloudkey.key
  register: unifi_private_key

- java_keystore:
    name: unifi
    certificate: "{{ unifi_certificate['content'] | b64decode }}"
    private_key: "{{ unifi_private_key['content'] | b64decode }}"
    password: "{{ unifi_jks_password }}"
    dest: /etc/ssl/private/unifi.keystore.jks
    owner: root
    group: ssl-cert
    mode: 0440
  notify: restart unifi

- stat:
    path: /etc/ssl/private/unifi.keystore.jks
    checksum_algorithm: md5
    get_attributes: false
    get_mime: false
  register: unifi_keystore

- copy:
    content: "{{ unifi_keystore.stat.checksum }} */etc/ssl/private/unifi.keystore.jks\n"
    dest: /etc/ssl/private/unifi.keystore.jks.md5
    owner: root
    group: root
    mode: 0444

- fetch:
    dest: backup
    src: "{{ item }}"
  loop:
    - /etc/ssl/private/cloudkey.crt
    - /etc/ssl/private/cloudkey.csr
    - /etc/ssl/private/cloudkey.key
    - /etc/ssl/private/cloudkey.p12
    - /etc/ssl/private/unifi.keystore.jks
    - /etc/ssl/private/unifi.keystore.jks.md5
